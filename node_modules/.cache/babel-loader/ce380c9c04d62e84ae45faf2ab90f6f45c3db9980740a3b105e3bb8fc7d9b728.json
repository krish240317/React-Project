{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nconst useFetch = url => {\n  _s();\n  const [data, setdata] = useState(null); // make it null initial change its value once data is fetch\n  const [pending, setpending] = useState(true); //this to show loding while data get fetching on screen\n  const [error, seterror] = useState(null);\n  useEffect(() => {\n    const abortfetch = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortfetch.signal\n      }).then(res => {\n        if (!res.ok) {\n          throw Error(\"Could not fetch data \");\n        }\n        return res.json();\n      }).then(data => {\n        //console.log(data);\n        setdata(data);\n        setpending(false);\n        //if get data then set erroe to null as on refresh we may get data then not see error msg\n        seterror(null);\n      }).catch(err => {\n        if (err.name === \"AbortError\") {\n          // console.log(\"Aborted\");\n          //seterror(err.message);\n        } else {\n          seterror(err.message);\n          setpending(false);\n          // console.log(err);\n        }\n      });\n    }, 1000);\n    return () => abortfetch.abort();\n  }, [url]);\n  return {\n    data,\n    pending,\n    error\n  };\n};\n_s(useFetch, \"KxQCx7kDIHycBe+svfNP2ZmWFj8=\");\nexport default useFetch;","map":{"version":3,"names":["useEffect","useState","useFetch","url","_s","data","setdata","pending","setpending","error","seterror","abortfetch","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","message","abort"],"sources":["C:/Users/ASUS/OneDrive/Desktop/React/my-blog2/src/useFetch.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setdata] = useState(null); // make it null initial change its value once data is fetch\r\n  const [pending, setpending] = useState(true); //this to show loding while data get fetching on screen\r\n  const [error, seterror] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortfetch = new AbortController();\r\n\r\n    setTimeout(() => {\r\n      fetch(url, { signal: abortfetch.signal })\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            throw Error(\"Could not fetch data \");\r\n          }\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          //console.log(data);\r\n          setdata(data);\r\n          setpending(false);\r\n          //if get data then set erroe to null as on refresh we may get data then not see error msg\r\n          seterror(null);\r\n        })\r\n        .catch((err) => {\r\n          if (err.name === \"AbortError\") {\r\n           // console.log(\"Aborted\");\r\n            //seterror(err.message);\r\n          } else {\r\n            seterror(err.message);\r\n            setpending(false);\r\n            // console.log(err);\r\n          }\r\n    })\r\n        }, 1000);\r\n\r\n      return () => abortfetch.abort();\r\n    \r\n  }, [url]);\r\n\r\n  return { data, pending, error };\r\n};\r\n\r\nexport default useFetch;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExCC,UAAU,CAAC,MAAM;MACfC,KAAK,CAACX,GAAG,EAAE;QAAEY,MAAM,EAAEJ,UAAU,CAACI;MAAO,CAAC,CAAC,CACtCC,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;UACX,MAAMC,KAAK,CAAC,uBAAuB,CAAC;QACtC;QACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;MACnB,CAAC,CAAC,CACDJ,IAAI,CAAEX,IAAI,IAAK;QACd;QACAC,OAAO,CAACD,IAAI,CAAC;QACbG,UAAU,CAAC,KAAK,CAAC;QACjB;QACAE,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,CACDW,KAAK,CAAEC,GAAG,IAAK;QACd,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;UAC9B;UACC;QAAA,CACD,MAAM;UACLb,QAAQ,CAACY,GAAG,CAACE,OAAO,CAAC;UACrBhB,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;MACN,CAAC,CAAC;IACE,CAAC,EAAE,IAAI,CAAC;IAEV,OAAO,MAAMG,UAAU,CAACc,KAAK,CAAC,CAAC;EAEnC,CAAC,EAAE,CAACtB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CAxCIF,QAAQ;AA0Cd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}